#!/usr/bin/env bash

# Archives & Compression
function x {
#TODO: Make use of atool.
  if [ -z "$1" ]; then
    echo "Usage: x <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ]; then
      case "$1" in
        *.tar.bz2)   tar xvjf "$1"    ;;
        *.tar.gz)    tar xvzf "$1"    ;;
        *.tar.xz)    tar xvJf "$1"    ;;
        *.lzma)      unlzma "$1"      ;;
        *.bz2)       bunzip2 "$1"     ;;
        *.rar)       unrar x -ad "$1" ;;
        *.gz)        gunzip "$1"      ;;
        *.tar)       tar xvf "$1"     ;;
        *.tbz2)      tar xvjf "$1"    ;;
        *.tgz)       tar xvzf "$1"    ;;
        *.zip)       unzip "$1"       ;;
        *.Z)         uncompress "$1"  ;;
        *.7z)        7z x "$1"        ;;
        *.xz)        unxz "$1"        ;;
        *.exe)       cabextract "$1"  ;;
        *)           echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "$1 - file does not exist"
    fi
  fi
}

function zip_all_individually {
if [ -z "$1" ];
then
  for i in *.rwx; do zip "$(basename "$i" .rwx).zip" "$i"; done
else
	#for i in *.$1; do zip `basename $i .$1`.zip $i; done
  for i in *."$1"; do zip "$(basename "$i" ."$1").zip" "$i"; done
fi
}

# Image Manipulation

function bmp_to_png {
	for img in *.bmp; do
		filename=${img%.*}
		convert "$filename.bmp" "$filename.png"
	done
}

# Everyday utils

function dusort {
  du -sh "$1*" | sort -h
}

function clif {
  #total lines of code in all files of extension <$1>
  # shellcheck disable=SC2038
	find . -name '*.'"$1" | xargs wc -l #SC2038 (warning): Use -print0/-0 or -exec + to allow for non-alphanumeric filenames.
}

function wdmesg {
	tail_lines="$1"
	if [ -z "$tail_lines" ]
	then
		tail_lines=20
	fi
	watch -n 0.1 "sudo dmesg | tail -$tail_lines"
}

function mkscript {
	if [ -z "$1" ]; then
		echo "Usage: mkscript <filename>"
	else
		echo '#!/usr/bin/env bash' > "$1"
		chmod +x "$1"
		$EDITOR "$1"
	fi
}

# File I/O

function pjson {
  jq . "$1"
}

function tar64 {
  tar cjf - "$1" | base64 | tr -d "\n"
}

# Terminal Browsing

function read_w3m {
  readable "$1" | w3m -T text/html
}
# Diagnostic/Troubleshooting/Show off

function dump_specs {
	rm specs.tar.gz

	lspci > lspci.log
	lsusb > lsusb.log

  # shellcheck disable=SC2024
	sudo inxi -FmB -v 7 > inxi.log
	sudo chown "$USER:$USER" inxi.log

	tar -cvf specs.tar.gz "*.log"

	rm lspci.log
	rm lsusb.log
	rm inxi.log
}

#Media Stuff
function ytdl_ogg {
  yt-dlp -x --audio-format vorbis "$1"
  #youtube-dl -x --audio-format opus "$1"
  #youtube-dl -x -f "bestaudio/best" "$1"
}
function cutsong {
	ffmpeg -i "$1" -ss "$2" -to "$3" -c copy ass.ogg
	mv ass.ogg "$1"
}

function update-cnf {
	sudo pkgfile -u
}

function update-grub {
	sudo grub-mkconfig -o /boot/grub/grub.cfg
}

function dmesg-fix {
	#Permanent fix - put in /etc/sysctl.d/51-dmesg-restrict.conf
	sudo sysctl kernel.dmesg_restrict=0
}

function ram_random_disable {
  sudo sysctl -w kernel.randomize_va_space=0
}

function ram_random_enable {
  sudo sysctl -w kernel.randomize_va_space=2
}

function lwh {
	ls -la "$(which "$1")"
}

#underline () { t="$1"; c=${2:-=}; echo "$1"; echo "${t//?/$c}"; } #Meh

c() { printf "%s\n" "$@" | bc -l; } # c 13+17

#ls -v | cat -n | while read n f; do mv -n "$f" "$n.ext"; done #?

mping(){ ping $1|awk -F[=\ ] '/me=/{t=$(NF-1);f=3000-14*log(t^20);c="play -V0 -q -n synth 1 pl " f " vol 1 reverb -w ";print $0;system(c)}';}
