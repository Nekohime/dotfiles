#!/usr/bin/env bash

# Released under public domain. Made by Nekohime (https://nekohime.net)
# Undergoing a rewrite...

# You should put some exports/alias(es) in your .bashrc, but this will handle defaults as well.
#export TODO_FILE=~/.neko/TODO.txt

PROGRAM_NAME=$(basename "$0")

if [ -z "$TODO_FILE" ]; then
	#echo "TODO_FILE is non-existent... using default"
	TODO_FILE=~/.todo/list.txt
	touch "$TODO_FILE"
fi

mkdir -p "${TODO_FILE%/*}/"

if [ -z "$EDITOR" ]; then
    EDITOR="nano"
fi

displayFile() {
	echo "$TODO_FILE"
}

displayContents() {
  if [ ! -s "$TODO_FILE" ]; then
    echo "* No entries."
  elif [[ $TODO_FILE == *.md ]]; then
    displayMD
  else
    grep -rn '' "$TODO_FILE" --color=always
  fi
}

displayMD() {
	bat -l md "$TODO_FILE"
}


usage() {
    echo "Usage: $PROGRAM_NAME [options]"
    echo
    echo "Options:"
    echo "  -f, --file             Display the current TODO file path"
    echo "  -h, --help             Display this help message"
    echo "  -l, --list             List all items in the TODO file"
    echo "  -m, --md               Display TODO file with Markdown formatting"
    echo "  -a, --add <string>     Add an item to the TODO list"
    echo "  -r, --remove <line>    Remove an item from the TODO list by line number"
    echo "  -e, --edit [line]      Open the TODO file in the user's preferred editor on [line], if provided."
    echo "  -g, --get <line>       Get an item from the TODO list by line number"
    echo "  -s, --search <string>  Search for items in the TODO list containing a given string"
    echo
    echo "Examples:"
		echo "  $PROGRAM_NAME -l                    # List all items in the TODO list"
    echo "  $PROGRAM_NAME -a \"Buy groceries\"    # Add \"Buy groceries\" to the TODO list"
    echo "  $PROGRAM_NAME -r 3                  # Remove the item at line 3 from the TODO list"
    echo "  $PROGRAM_NAME -e                    # Edit the TODO list using the default CLI editor"
    echo "  $PROGRAM_NAME -g 1                  # Get the item at line 1 from the TODO list"
    echo "  $PROGRAM_NAME -s \"important\"        # Search for items containing \"important\" in the TODO list"
    echo
    exit 1
}

# list, file, search, add, delete, edit, backup, get, help/?

if [ "$#" -eq 0 ]; then
  displayFile
  displayContents
fi

VALID_ARGS=$(getopt -o fhlmea:r:g:s: --long file,help,list,md,edit,add:,remove:,get:,search: -- "$@")
getopt_exit_code=$?

if ! [ $getopt_exit_code -eq 0 ]; then
	usage
fi

#if ! [[ $? -eq 0 ]]; then
#    usage
#fi

eval set -- "$VALID_ARGS"
while true; do
	case "$1" in
		-f | --file)
				displayFile
				shift
				;;
		-h | --help)
				usage
				;;
		-l | --list)
				# displayFile # ./todo will display the file in use, but not --list
				grep -rn '' "$TODO_FILE" --color=always
				shift
				;;
		-m | --md)
				displayMD
				shift
				;;
		-a | --add)
				echo "$2" >> "$TODO_FILE"
				shift 2
				;;
		-r | --remove)
				if [ "$2" -gt 0 ]; then
				  sed -i "$2"d "$TODO_FILE"
				fi
				shift 2
				;;
		-e | --edit)
				# Check if $2 is a number
				shift 1
				if [[ $2 =~ ^[0-9]+$ ]]; then
				    # If $2 is a number, execute with line number
				    $EDITOR +"$2" "$TODO_FILE" -L
				else
				    # If $2 is not a number or empty, execute without line number
				    $EDITOR "$TODO_FILE" -L
				fi
				;;
		-g | --get)
				sed -n "$2,$2 p" "$TODO_FILE"
				shift 2
				;;
		-s | --search)
				# displayFile
				grep -rni "$2" "$TODO_FILE" --color=always
				shift 2
				;;
		--)
				shift
				break
				;;
  esac
done
